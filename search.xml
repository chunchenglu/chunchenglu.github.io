<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-Markdown文档语法</title>
      <link href="/2021/07/10/hexo-md%E6%96%87%E6%A1%A3%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/07/10/hexo-md%E6%96%87%E6%A1%A3%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>事业常成于坚忍，毁于急躁。我在沙漠中曾亲眼看见，匆忙的旅人落在从容的后边；疾驰的骏马落在后头，缓步的骆驼继续向前。——萨迪<br>A career is often made in perseverance and destroyed in impatience. I have seen with my own eyes in the desert that the hurried traveler falls behind the subdued one; the galloping horse falls behind, the slow camel continues on. ——Sadie</p><hr><p>目录至少是四级标题：####</p><h4 id="目录1"><a href="#目录1" class="headerlink" title="目录1"></a>目录1</h4><h4 id="目录2"><a href="#目录2" class="headerlink" title="目录2"></a>目录2</h4><h4 id="目录3"><a href="#目录3" class="headerlink" title="目录3"></a>目录3</h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python日记4（网页信息提取的3种方法）</title>
      <link href="/2021/07/10/python%E6%97%A5%E8%AE%B04/"/>
      <url>/2021/07/10/python%E6%97%A5%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<p>事业常成于坚忍，毁于急躁。我在沙漠中曾亲眼看见，匆忙的旅人落在从容的后边；疾驰的骏马落在后头，缓步的骆驼继续向前。——萨迪<br>A career is often made in perseverance and destroyed in impatience. I have seen with my own eyes in the desert that the hurried traveler falls behind the subdued one; the galloping horse falls behind, the slow camel continues on. ——Sadie</p><hr><h3 id="1-正则表达式re"><a href="#1-正则表达式re" class="headerlink" title="1.正则表达式re"></a>1.正则表达式re</h3><p>首先需要引用：re<br>注：表达式中的r’’用在pattern之前，表示单引号中的字符串为原生字符，不会进行任何转义</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>re.match #从开始位置开始匹配，如果开头没有则无<br>例如：</p><pre class="line-numbers language-python"><code class="language-python">re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'liuyan1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#返回l</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'liuyan1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#返回None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>re.search #搜索整个字符串<br>例如：</p><pre class="line-numbers language-python"><code class="language-python">re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'liuyan1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>re.findall #搜索整个字符串，返回一个list<br>例如：</p><pre class="line-numbers language-python"><code class="language-python">re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'liuyany'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回["y","y"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://blog.csdn.net/weixin_40907382/article/details/79654372"><strong>正则表达式</strong></a>（文章链接）可以包含一些可选标志修饰符来控制匹配的模式。</p><p><strong>re.I</strong>    使匹配对大小写不敏感<br><strong>re.L</strong>    做本地化识别（locale-aware）匹配<br><strong>re.M</strong>    多行匹配，影响 ^ 和 $<br><strong>re.S</strong>    使 . 匹配包括换行在内的所有字符<br><strong>re.U</strong>    根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.<br><strong>re.X</strong>    该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</p><h4 id="正则表达式实例"><a href="#正则表达式实例" class="headerlink" title="正则表达式实例"></a><strong>正则表达式实例</strong></h4><p>详细匹配可查询上述文章链接，以下描述选取常用匹配模式进行举例</p><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a><strong>字符类</strong></h4><p>[<strong>^aeiou</strong>]匹配除了aeiou字母以外的所有字符<br>[<strong>^0-9</strong>]匹配除了数字外的字符<br>[<strong>0-9</strong>]匹配任何数字。类似于 [0123456789]</p><h4 id="特殊字符类"><a href="#特殊字符类" class="headerlink" title="特殊字符类"></a><strong>特殊字符类</strong></h4><p>.匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382/r/n/t"</span> name2 <span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'.'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span><span class="token punctuation">[</span><span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'张'</span><span class="token punctuation">,</span> <span class="token string">'三'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'李'</span><span class="token punctuation">,</span> <span class="token string">'四'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.*匹配除 “\n” 之外的任何多个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382/r/n/t"</span> name2 <span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'.*'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span><span class="token punctuation">[</span><span class="token string">'zhangsan,张三,李四,xiaohong12382/r/n/t'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\d匹配一个数字字符。等价于 [0-9]。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382/r/n/t"</span> name2 <span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\d+匹配多个数字字符。等价于 [0-9]。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382/r/n/t"</span> name2 <span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span><span class="token punctuation">[</span><span class="token string">'12382'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\D    匹配一个非数字字符。等价于 [^0-9]。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382/r/n/t"</span> name2 <span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\D'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span><span class="token punctuation">[</span><span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'张'</span><span class="token punctuation">,</span> <span class="token string">'三'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'李'</span><span class="token punctuation">,</span> <span class="token string">'四'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\D+匹配多个非数字字符。等价于 [^0-9]。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382/r/n/t"</span> name2 <span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\D+'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span><span class="token punctuation">[</span><span class="token string">'zhangsan,张三,李四,xiaohong'</span><span class="token punctuation">,</span> <span class="token string">'/r/n/t'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\s    匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382   /r/n/t"</span>name2 <span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\s'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span><span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#因为字符串中包含了三个空格如果匹配改为\s+</span>则输出结果为：<span class="token punctuation">[</span><span class="token string">'   '</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\S+    匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382   /r/n/t"</span>name2 <span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\S+'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为:</span><span class="token punctuation">[</span><span class="token string">'zhangsan,张三,李四,xiaohong12382'</span><span class="token punctuation">,</span> <span class="token string">'/r/n/t'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#把多余的空格去除了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a><strong>匹配模式</strong></h4><p>书写正则表达式例如：<br>如果想要匹配name中的李四方式1：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382/r/n/t"</span> <span class="token comment" spellcheck="true"># 如果想要匹配name中的李四方式1：</span>name2<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'张三,(.*?),xiaohong2'</span><span class="token punctuation">)</span>name3<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>name2<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name3<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#运行结果：</span><span class="token punctuation">[</span><span class="token string">'李四'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要匹配name中的李四方式2：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rename<span class="token operator">=</span><span class="token string">"zhangsan,张三,李四,xiaohong12382"</span> <span class="token comment" spellcheck="true"># 如果想要匹配name中的李四方式2：</span>name2 <span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'李四'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name3<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#运行结果：</span><span class="token punctuation">[</span><span class="token string">'李四'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串的替换和修改"><a href="#字符串的替换和修改" class="headerlink" title="字符串的替换和修改"></a><strong>字符串的替换和修改</strong></h4><p>re 模块还提供了对字符串的替换和修改函数，他们比字符串对象提供的函数功能要强大一些。这几个函数是：</p><p>sub ( rule , replace , target [,count] )<br>subn(rule , replace , target [,count] )</p><p>在目标字符串中规格规则查找匹配的字符串，再把它们替换成指定的字符串。你可以指定一个最多替换次数，否则将替换所有的匹配到的字符串。第一个参数是正则规则，第二个参数是指定的用来替换的字符串，第三个参数是目标字符串，第四个参数是最多替换次数。这两个函数的唯一区别是返回值。</p><p>sub 返回一个被替换的字符串<br>subn返回一个元组，第一个元素是被替换的字符串，第二个元素是一个数字，表明产生了多少次替换。<br>例：将下面字符串中的 ’dog’ 全部替换成 ’pig’</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> res<span class="token operator">=</span><span class="token string">'I have a dog , you have a dog , he have a dog'</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span> r<span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'pig'</span><span class="token punctuation">,</span>s <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为;</span>I have a pig <span class="token punctuation">,</span> you have a pig <span class="token punctuation">,</span> he have a pig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们只想替换前面两个，则:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> res<span class="token operator">=</span><span class="token string">'I have a dog , you have a dog , he have a dog'</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span> r<span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'pig'</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span>I have a pig <span class="token punctuation">,</span> you have a pig <span class="token punctuation">,</span> he have a dog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者我们想知道发生了多少次替换，则可以使用 subn</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> res<span class="token operator">=</span><span class="token string">'I have a dog , you have a dog , he have a dog'</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span> r<span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'pig'</span><span class="token punctuation">,</span>s <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span><span class="token punctuation">(</span><span class="token string">'I have a cat , you have a cat , he have a cat ,3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-BeautifulSoup"><a href="#2-BeautifulSoup" class="headerlink" title="2.BeautifulSoup"></a>2.BeautifulSoup</h3><h4 id="1）什么是-BeautifulSoup？"><a href="#1）什么是-BeautifulSoup？" class="headerlink" title="1）什么是 BeautifulSoup？"></a><strong>1）什么是 BeautifulSoup？</strong></h4><p>BeautifulSoup是 python 的一个库，最主要的功能是从网页抓取数据，它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。 </p><p>BeautifulSoup 自动将输入文档转换为 Unicode 编码，输出文档转换为 utf-8编码。BeautifulSoup 支持 Python 标准库中的 HTML 解析器，还支持一些第三方的解析器，如果我们不安装它，则 Python 会使用 Python 默认的解析器，lxml 解析器更加强大，速度更快，推荐安装。</p><h4 id="2）Python-标准库"><a href="#2）Python-标准库" class="headerlink" title="2）Python 标准库"></a><strong>2）Python 标准库</strong></h4><p>BeautifulSoup(markup, “html.parser”)<br>Python 的内置标准库<br>执行速度适中<br>文档容错能力强<br>Python 2.7.3 or 3.2.2)前的版本中文档容错能力差</p><h4 id="3-lxml-HTML-解析器"><a href="#3-lxml-HTML-解析器" class="headerlink" title="3) lxml HTML 解析器"></a><strong>3) lxml HTML 解析器</strong></h4><p>BeautifulSoup(markup, “lxml”)<br>速度快<br>文档容错能力强<br>需要安装 C 语言库</p><h4 id="4-lxml-XML-解析器"><a href="#4-lxml-XML-解析器" class="headerlink" title="4) lxml XML 解析器"></a><strong>4) lxml XML 解析器</strong></h4><p>BeautifulSoup(markup, “lxml”)，BeautifulSoup(markup, “xml”)<br>速度快<br>唯一支持 XML 的解析器<br>需要安装 C 语言库</p><h4 id="5-使用方法"><a href="#5-使用方法" class="headerlink" title="5) 使用方法"></a><strong>5) 使用方法</strong></h4><p>首先导入 bs4 库</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup                                                                                             <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个字符串</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml <span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>          &lt;body>&lt;p class="title" name="dromouse">&lt;b>The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">&lt;!-- Elsie -->&lt;/a>,&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>'''</span>soup <span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#格式化输出</span>soup1 <span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>soup1<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>soup2 <span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'xml'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>soup2<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">''</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三种方式结果一样，以下便是输出结果，格式化打印出了它的内容:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span>html<span class="token operator">></span> <span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>title<span class="token operator">></span>   The Dormouse's story  <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span> name<span class="token operator">=</span><span class="token string">"dromouse"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>b<span class="token operator">></span>    The Dormouse's story   <span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"story"</span><span class="token operator">></span>   Once upon a time there were three little sisters<span class="token punctuation">;</span> <span class="token operator">and</span> their names were   <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/elsie"</span> id<span class="token operator">=</span><span class="token string">"link1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> Elsie <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>   <span class="token punctuation">,</span>   <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/lacie"</span> id<span class="token operator">=</span><span class="token string">"link2"</span><span class="token operator">></span>    Lacie   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>   <span class="token operator">and</span>   <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/tillie"</span> id<span class="token operator">=</span><span class="token string">"link3"</span><span class="token operator">></span>    Tillie   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>   <span class="token punctuation">;</span><span class="token operator">and</span> they lived at the bottom of a well<span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"story"</span><span class="token operator">></span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BeautifulSoup四大对象种类"><a href="#BeautifulSoup四大对象种类" class="headerlink" title="BeautifulSoup四大对象种类"></a>BeautifulSoup四大对象种类</h4><p>了解完解析方式我们再来看看BeautifulSoup的四大对象种类<br>    1.Tag<br>    2.NavigableString<br>    3.BeautifulSoup<br>    4.Comment<br>Tag 是什么？通俗点讲就是 HTML 中的一个个标签，例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span>title<span class="token operator">></span>The Dormouse's story<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/elsie"</span> id<span class="token operator">=</span><span class="token string">"link1"</span><span class="token operator">></span>Elsie<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们可以利用 soup加标签名轻松地获取这些标签的内容,例如：</p><pre class="line-numbers language-python"><code class="language-python">soup1 <span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print (soup1.prettify())</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup1<span class="token punctuation">.</span>title<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#只查找第一个</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup1<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup1<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup1<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果输出为：</p><pre class="line-numbers language-python"><code class="language-python">E<span class="token punctuation">:</span>\python项目练习\venv\Scripts\python<span class="token punctuation">.</span>exe E<span class="token punctuation">:</span><span class="token operator">/</span>python项目练习<span class="token operator">/</span>练习<span class="token operator">/</span>正则表达<span class="token punctuation">.</span>py<span class="token operator">&lt;</span>title<span class="token operator">></span>The Dormouse's story<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>The Dormouse's story<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/elsie"</span> id<span class="token operator">=</span><span class="token string">"link1"</span><span class="token operator">></span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> Elsie <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span> name<span class="token operator">=</span><span class="token string">"dromouse"</span><span class="token operator">></span><span class="token operator">&lt;</span>b<span class="token operator">></span>The Dormouse's story<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过有一点是，它查找的是在所有内容中的第一个符合要求的标签。但可以不可查找所有符合条件的标签那？当然可以！例如：</p><p><strong>搜索文档树</strong><br>find_all( name , attrs , recursive , text , **kwargs )</p><p>find_all() 方法搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件，name 参数可以查找所有名字为 name 的tag,字符串对象会被自动忽略掉</p><pre class="line-numbers language-python"><code class="language-python">soup1 <span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print (soup1.prettify())</span>soup2<span class="token operator">=</span>soup1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为;</p><pre class="line-numbers language-python"><code class="language-python">E<span class="token punctuation">:</span>\python项目练习\venv\Scripts\python<span class="token punctuation">.</span>exe E<span class="token punctuation">:</span><span class="token operator">/</span>python项目练习<span class="token operator">/</span>练习<span class="token operator">/</span>正则表达<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/elsie"</span> id<span class="token operator">=</span><span class="token string">"link1"</span><span class="token operator">></span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> Elsie <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/lacie"</span> id<span class="token operator">=</span><span class="token string">"link2"</span><span class="token operator">></span>Lacie<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/tillie"</span> id<span class="token operator">=</span><span class="token string">"link3"</span><span class="token operator">></span>Tillie<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">]</span>进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么如何获取每个符合条件的节点内容那,第一种方式为用正则表达式搭配，不过要把soup转化为字符串,最后返回的内容为一个列表例如：</p><pre class="line-numbers language-python"><code class="language-python">soup1 <span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print (soup1.prettify())</span>soup2<span class="token operator">=</span>soup1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>soup2<span class="token operator">=</span>str<span class="token punctuation">(</span>soup2<span class="token punctuation">)</span>a<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;a class="sister" href="(.*?)" id=.*?&lt;/a>'</span><span class="token punctuation">,</span>soup2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-python"><code class="language-python">E<span class="token punctuation">:</span>\python项目练习\venv\Scripts\python<span class="token punctuation">.</span>exe E<span class="token punctuation">:</span><span class="token operator">/</span>python项目练习<span class="token operator">/</span>练习<span class="token operator">/</span>正则表达<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token string">'http://example.com/elsie'</span><span class="token punctuation">,</span> <span class="token string">'http://example.com/lacie'</span><span class="token punctuation">,</span> <span class="token string">'http://example.com/tillie'</span><span class="token punctuation">]</span>进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方式为先遍历检索到的内容，然后用get获取内容例如：</p><pre class="line-numbers language-python"><code class="language-python">soup1 <span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print (soup1.prettify())</span>soup2<span class="token operator">=</span>soup1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token keyword">for</span> href <span class="token keyword">in</span> soup2<span class="token punctuation">:</span>    href1 <span class="token operator">=</span>href<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>href1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的结果为:</p><pre class="line-numbers language-python"><code class="language-python">E<span class="token punctuation">:</span>\python项目练习\venv\Scripts\python<span class="token punctuation">.</span>exe E<span class="token punctuation">:</span><span class="token operator">/</span>python项目练习<span class="token operator">/</span>练习<span class="token operator">/</span>正则表达<span class="token punctuation">.</span>pyhttp<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>elsiehttp<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>laciehttp<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>tillie进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果页面中有很多相同tag的标签，则可以通过标签属性进行过滤例如：</p><pre class="line-numbers language-python"><code class="language-python">soup1 <span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print (soup1.prettify())</span>soup2<span class="token operator">=</span>soup1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"sister"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup2<span class="token punctuation">)</span><span class="token keyword">for</span> href <span class="token keyword">in</span> soup2<span class="token punctuation">:</span>    href1 <span class="token operator">=</span>href<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>href1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python"><code class="language-python">E<span class="token punctuation">:</span>\python项目练习\venv\Scripts\python<span class="token punctuation">.</span>exe E<span class="token punctuation">:</span><span class="token operator">/</span>python项目练习<span class="token operator">/</span>练习<span class="token operator">/</span>正则表达<span class="token punctuation">.</span>pyhttp<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>elsiehttp<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>laciehttp<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>tillie进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多关于BeautifulSoup的内容可点击查看<a href="https://blog.csdn.net/slhlde/article/details/81937838?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162597139716780261976491%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=162597139716780261976491&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81937838.first_rank_v2_pc_rank_v29&amp;utm_term=beautifulsoup%E7%94%A8%E6%B3%95&amp;spm=1018.2226.3001.4187">链接</a></p><hr><h3 id="3-xpath"><a href="#3-xpath" class="headerlink" title="3.xpath"></a>3.xpath</h3><p>待补充有关内容请参考<a href="https://blog.csdn.net/qq_44619675/article/details/113938171?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162599146716780264016422%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=162599146716780264016422&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-113938171.first_rank_v2_pc_rank_v29&amp;utm_term=xpath&amp;spm=1018.2226.3001.4187">文章链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达re </tag>
            
            <tag> BeautifulSoup </tag>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python日记3（requests）</title>
      <link href="/2021/07/10/python%E6%97%A5%E8%AE%B03/"/>
      <url>/2021/07/10/python%E6%97%A5%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<p>事业常成于坚忍，毁于急躁。我在沙漠中曾亲眼看见，匆忙的旅人落在从容的后边；疾驰的骏马落在后头，缓步的骆驼继续向前。——萨迪<br>A career is often made in perseverance and destroyed in impatience. I have seen with my own eyes in the desert that the hurried traveler falls behind the subdued one; the galloping horse falls behind, the slow camel continues on. ——Sadie</p><hr><h4 id="1-requests请求"><a href="#1-requests请求" class="headerlink" title="1.requests请求"></a>1.requests请求</h4><h4 id="（1）requests-get"><a href="#（1）requests-get" class="headerlink" title="（1）requests.get"></a>（1）requests.get</h4><p>requests请求网页个人比较喜欢用以下两种方式：<br><strong>（1）requests.get()</strong><br><strong>（2）req =requests.session，req =req.get()</strong></p><p>方式（1）<strong>只需要运用requests模块里面的get就可以实现对网页请求（requests.get）</strong>，不过这种方式如果大量强求网页需要构造网页的请求头部信息headers，内容包括user-agent，Cookie,csrf,Referer等，例如：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span>  requestsurl <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>                                                                headers <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token keyword">:</span><span class="token string">"换成自己的信息"</span>,<span class="token string">"Cookie"</span><span class="token keyword">:</span><span class="token string">"换成自己的信息"</span>,<span class="token string">"csrf"</span><span class="token keyword">:</span><span class="token string">"换成自己的信息"</span>,  <span class="token comment" spellcheck="true">#非必须参数</span><span class="token string">"Referer"</span><span class="token keyword">:</span><span class="token string">"换成自己的信息"</span> <span class="token comment" spellcheck="true">#非必须参数                    }</span>response <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url,headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>response.encoding<span class="token operator">=</span><span class="token string">"utf-8"</span>print<span class="token punctuation">(</span>response.text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果输出为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--STATUS OK--<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html;charset=utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge,chrome=1"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta content<span class="token operator">=</span><span class="token string">"always"</span> name<span class="token operator">=</span><span class="token string">"referrer"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"theme-color"</span> content<span class="token operator">=</span><span class="token string">"#2932e1"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"description"</span> content<span class="token operator">=</span>"全球领先的中文搜索引擎、致力于让网民更便捷地获取信息，找到所求。百度超过千亿的中文网页数据库，可以瞬间找到相关的搜索结果<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（2）requests-session"><a href="#（2）requests-session" class="headerlink" title="（2）requests.session"></a>（2）requests.session</h4><p>方式（2）中<strong>在get前提前引入requests内的session功能</strong>，在进行接口测试的时候，我们会调用多个接口发出多个请求，在这些请求中有时候需要保持一些共用的数据，例如cookie信息。requests库的session对象能够帮我们跨请求保持某些参数，也会在同一个session实例发出的所有请求之间保持cookie。并将使用urllib3的连接池。因此，如果您要向同一主机发出多个请求，则基础TCP连接将被重用，这可能会导致性能显着提高。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span>  requestsurl <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>                                                                                             req <span class="token operator">=</span>requests.session<span class="token punctuation">(</span><span class="token punctuation">)</span>response <span class="token operator">=</span> req.get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>response.encoding<span class="token operator">=</span><span class="token string">"utf-8"</span>print<span class="token punctuation">(</span>response.text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--STATUS OK--<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span> <span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span>content-type content<span class="token operator">=</span>text/html<span class="token punctuation">;</span>charset<span class="token operator">=</span>utf-8<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span>X-UA-Compatible content<span class="token operator">=</span>IE<span class="token operator">=</span>Edge<span class="token operator">></span><span class="token operator">&lt;</span>meta content<span class="token operator">=</span>always name<span class="token operator">=</span>referrer<span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span>stylesheet type<span class="token operator">=</span>text/css href<span class="token operator">=</span>https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>百度一下，你就知道<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span> <span class="token operator">&lt;</span>body link<span class="token operator">=</span><span class="token comment" spellcheck="true">#0000cc> &lt;div id=wrapper> &lt;div id=head> &lt;div class=head_wrapper> &lt;div class=s_form> &lt;div class=s_form_wrapper> &lt;div id=lg> &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129> &lt;/div> &lt;form id=form name=f action=//www.baidu.com/s class=fm> &lt;input </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS中的蒙版</title>
      <link href="/2021/07/09/Photoshop%E4%B8%AD%E5%9B%BE%E5%B1%82%E6%A6%82%E5%BF%B5%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2021/07/09/Photoshop%E4%B8%AD%E5%9B%BE%E5%B1%82%E6%A6%82%E5%BF%B5%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>事业常成于坚忍，毁于急躁。我在沙漠中曾亲眼看见，匆忙的旅人落在从容的后边；疾驰的骏马落在后头，缓步的骆驼继续向前。——萨迪<br>A career is often made in perseverance and destroyed in impatience. I have seen with my own eyes in the desert that the hurried traveler falls behind the subdued one; the galloping horse falls behind, the slow camel continues on. ——Sadie</p><hr><h4 id="1-快速蒙版"><a href="#1-快速蒙版" class="headerlink" title="1.快速蒙版"></a>1.快速蒙版</h4><p><strong>快捷键：</strong>Q<br><strong>本质：</strong>通道 所以可以运用通道所有<strong>可以用的工具，画笔、橡皮擦、选区，滤镜等等</strong>。可进行通道编辑，在退出快速蒙版模式时，原蒙版里原图像显现的部分便成为选区。<br><strong>位置：</strong>快速蒙版在左侧工具栏里，或者<strong>按下快捷键Q</strong>。<br><strong>释义：</strong>使用方法：如果用框工具创建了一个矩形选区，<strong>可以进入快速蒙版模式并使用画笔扩展或收缩选区</strong>，或者也可以使用滤镜扭曲选区边缘。也可以使用选区工具，因为快速蒙版不是选区。从选中区域开始，使用快速蒙版模式在该区域中添加或减去创建蒙版。另外，也可以完全在快速蒙版模式中创建蒙版。<br>**作用: **通过用黑白灰三类颜色画笔来做选区，白色画笔可以画出被选择区域，黑色画笔可画出不被选择区域，灰色画笔画出半透明选择区域。快速蒙版可以创建和修改选区,<strong>在快速蒙版模式下,红色是非选区</strong>。</p><hr><h4 id="2-图层蒙版"><a href="#2-图层蒙版" class="headerlink" title="2.图层蒙版"></a>2.图层蒙版</h4><p><strong>位置：</strong>图层面板下方<br><strong>释义：</strong>图层蒙版可以理解为<strong>在当前图层上面覆盖一层玻璃片，这种玻璃片有透明的、半透明的、完全不透明的</strong>。然后用各种绘图工具在蒙版上涂色，<strong>涂黑色的地方蒙版变为透明的</strong>，看不见当前图层的图像。<strong>涂白色则使涂色部分变为不透明可看到当前图层上的图像</strong>，<strong>涂灰色使蒙版变为半透明</strong>，透明的程序有涂色的灰度深浅决定，是photoshop中一项十分重要的功能。<br><strong>简单理解：</strong>图层蒙版跟橡皮擦工具差不多，它也可以把图片擦掉，但它比橡皮擦多了一个十分实用的功能，它可以把擦掉的地方还原。简单说，图层蒙版就是一个不单可以擦掉，还可把擦掉的地方还原的橡皮擦工具。</p><hr><h4 id="3-剪切蒙版"><a href="#3-剪切蒙版" class="headerlink" title="3.剪切蒙版"></a>3.剪切蒙版</h4><p><strong>位置：</strong>菜单栏的图层-创建剪贴蒙版（快捷键<strong>CTRL+ALT+G</strong>）<br><strong>释义：</strong>photoshop软件术语，相邻的两个图层创建剪贴蒙版后，位于上方的图层所显示的形状或虚实就要受下面图层的控制，下面图层<strong>下面图层的形状是什么样的，上面图层就显示什么形状，或者只能有下面图层的形状部分能够显示出来，但画面内容还是上面图层的，只是形状受下面图层控制</strong>。<br><strong>使用方法：</strong>按住ALT键，鼠标放在两个图层之间，鼠标形状改变时单击。</p><hr><h4 id="4-矢量蒙版"><a href="#4-矢量蒙版" class="headerlink" title="4.矢量蒙版"></a>4.矢量蒙版</h4><p><strong>位置：</strong>菜单栏的图层-矢量蒙版-显示全部（快捷键<strong>ALT+L+V</strong>）<br><strong>释义：</strong>矢量蒙版，也叫做<strong>路径蒙版</strong>，是可以任意放大或缩小的蒙版，简单地说，就是不会因放大或缩小的操作影响清晰度的蒙版。矢量蒙版可以保证原图不受损，并且可以随时用钢笔工具修改形状，并且形状无论拉大多少，都不会失真。<br><strong>使用方法：</strong>通过路径控制图像的显示区域，但是仅能用于当前图层（大多用于抠图）。</p>]]></content>
      
      
      <categories>
          
          <category> photoshop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS </tag>
            
            <tag> 图层蒙版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python日记2(random)</title>
      <link href="/2021/07/09/python%E6%97%A5%E8%AE%B02/"/>
      <url>/2021/07/09/python%E6%97%A5%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<p>事业常成于坚忍，毁于急躁。我在沙漠中曾亲眼看见，匆忙的旅人落在从容的后边；疾驰的骏马落在后头，缓步的骆驼继续向前。——萨迪<br>A career is often made in perseverance and destroyed in impatience. I have seen with my own eyes in the desert that the hurried traveler falls behind the subdued one; the galloping horse falls behind, the slow camel continues on. ——Sadie</p><hr><h4 id="1-random的应用"><a href="#1-random的应用" class="headerlink" title="1.random的应用"></a>1.random的应用</h4><p>下面是一个具体的实验小项目，目标是利用random.uniform模块结合round函数实现随机小数的生成，以及偏差的计算：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random                                                                                                                                             <span class="token comment" spellcheck="true">#随机数字生成器默认偏差控制在1-10%</span><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----欢迎使用随机数字生成器-----"</span><span class="token punctuation">)</span>bazhi<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"请输入靶值："</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#预先设定一个目标值</span>bazhi<span class="token operator">=</span>float<span class="token punctuation">(</span>bazhi<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">#目标值可能带有小数点所以转换成浮点类型</span>range_<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"请输入你想要偏差控制在百分之："</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#百分比表示成分数</span>range_<span class="token operator">=</span>int<span class="token punctuation">(</span>range_<span class="token punctuation">)</span>range_n<span class="token operator">=</span>range_<span class="token operator">/</span><span class="token number">100</span>                                                             <span class="token comment" spellcheck="true">#计算目标值（靶值）范围上下限</span>up_<span class="token operator">=</span>bazhi<span class="token operator">+</span>bazhi<span class="token operator">*</span>range_nup_<span class="token operator">=</span>round<span class="token punctuation">(</span>up_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>down_<span class="token operator">=</span>bazhi<span class="token operator">-</span>bazhi<span class="token operator">*</span>range_ndown_<span class="token operator">=</span>round<span class="token punctuation">(</span>down_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>n<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"请输入想要的随机数个数:"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#利用循环控制输出随机数的个数</span>n<span class="token operator">=</span>int<span class="token punctuation">(</span>n<span class="token punctuation">)</span>sum_<span class="token operator">=</span><span class="token number">0.0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        random_n<span class="token operator">=</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span>down_<span class="token punctuation">,</span>up_<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#使用random.uniform模块生成浮点类型随机数</span>    random_n<span class="token operator">=</span>round<span class="token punctuation">(</span>random_n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#利用round函数，保留小数点位数</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"第{i+1}个数据为:"</span><span class="token punctuation">,</span>random_n<span class="token punctuation">)</span>    sum_<span class="token operator">=</span>sum_<span class="token operator">+</span>random_naverage<span class="token operator">=</span>sum_<span class="token operator">/</span>naverage<span class="token operator">=</span>round<span class="token punctuation">(</span>average<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true">#计算偏差差</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"生成数据的均值为:"</span><span class="token punctuation">,</span>average<span class="token punctuation">)</span>sd<span class="token operator">=</span><span class="token punctuation">(</span>average<span class="token operator">/</span>bazhi<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span>      sd<span class="token operator">=</span>str<span class="token punctuation">(</span>round<span class="token punctuation">(</span>sd<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据均值与靶值的偏差为:"</span><span class="token punctuation">,</span>sd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的结果为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>欢迎使用随机数字生成器<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>                                                                                                                                             请输入靶值：<span class="token number">115</span>请输入你想要偏差控制在百分之：<span class="token number">5</span>请输入想要的随机数个数<span class="token punctuation">:</span><span class="token number">10</span>第<span class="token number">1</span>个数据为<span class="token punctuation">:</span> <span class="token number">110.0</span>第<span class="token number">2</span>个数据为<span class="token punctuation">:</span> <span class="token number">112.5</span>第<span class="token number">3</span>个数据为<span class="token punctuation">:</span> <span class="token number">111.1</span>第<span class="token number">4</span>个数据为<span class="token punctuation">:</span> <span class="token number">110.0</span>第<span class="token number">5</span>个数据为<span class="token punctuation">:</span> <span class="token number">110.3</span>第<span class="token number">6</span>个数据为<span class="token punctuation">:</span> <span class="token number">120.8</span>第<span class="token number">7</span>个数据为<span class="token punctuation">:</span> <span class="token number">113.7</span>第<span class="token number">8</span>个数据为<span class="token punctuation">:</span> <span class="token number">120.4</span>第<span class="token number">9</span>个数据为<span class="token punctuation">:</span> <span class="token number">111.7</span>第<span class="token number">10</span>个数据为<span class="token punctuation">:</span> <span class="token number">114.9</span>生成数据的均值为<span class="token punctuation">:</span> <span class="token number">113.5</span>数据均值与靶值的偏差为<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1.3</span><span class="token operator">%</span>进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> random.randim </tag>
            
            <tag> random.uniform </tag>
            
            <tag> round </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python日记1（数据类型）</title>
      <link href="/2021/07/08/python%E6%97%A5%E8%AE%B01/"/>
      <url>/2021/07/08/python%E6%97%A5%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>事业常成于坚忍，毁于急躁。我在沙漠中曾亲眼看见，匆忙的旅人落在从容的后边；疾驰的骏马落在后头，缓步的骆驼继续向前。——萨迪<br>A career is often made in perseverance and destroyed in impatience. I have seen with my own eyes in the desert that the hurried traveler falls behind the subdued one; the galloping horse falls behind, the slow camel continues on. ——Sadie</p><hr><h3 id="python中常见的数据类型"><a href="#python中常见的数据类型" class="headerlink" title="python中常见的数据类型"></a>python中常见的数据类型</h3><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。等号（=）用来给变量赋值。等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。</p><h4 id="1-字符串（str）"><a href="#1-字符串（str）" class="headerlink" title="1.字符串（str）"></a>1.字符串（str）</h4><p>基于字符串的示例：                                </p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"zhangsan"</span>                                                                                                       name1 <span class="token operator">=</span> <span class="token string">"张三"</span>name2 <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行程序会输出以下结果：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>                                                                                                                                                                    <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果显示“xxx”内部的默认为字符串,换而言之如果不带“”会是什么类型那？</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token number">12345</span>                                                                                                                                                                    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span>                                                                                                                                                                    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实验结果可以表明我们可以用“”将非字符串类型的数据转换为字符串，当然也可而已运用python内置命令str将数据转换为字符串例如:</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token number">123456</span>                                                                                                                                                                    name <span class="token operator">=</span>str<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>                                                                                                                                                                    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除此之外字符串的索引功能也很重要,字符串的索引默认从0开始例如：</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"zhangsan"</span>                                                                                                                                                                    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>name <span class="token operator">=</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>                                                                                                                                                                    a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="2-整数型（int）"><a href="#2-整数型（int）" class="headerlink" title="2.整数型（int）"></a>2.整数型（int）</h4><p>整数类型常用于小数点取整，或者将input输入的数据转化为整数方便计算例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#类型转换</span>a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"我的年龄是："</span><span class="token punctuation">)</span>                                                                                                                                                                    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span>int<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#取整</span>b <span class="token operator">=</span><span class="token number">3.1415</span>                                                                                                                                                                    b <span class="token operator">=</span> int<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python"><code class="language-python">我的年龄是：<span class="token number">20</span>                                                                                                                                                                    <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="3-浮点型（float）"><a href="#3-浮点型（float）" class="headerlink" title="3.浮点型（float）"></a>3.浮点型（float）</h4><p>浮点的用法与int如出一辙，这里就不多举例子了，重要的是数据类型与相应的数据要保持一致例如：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"圆周率是："</span><span class="token punctuation">)</span>                                                                                                                                                                    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span>int<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>b<span class="token operator">=</span>float<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-python"><code class="language-python">ValueError<span class="token punctuation">:</span> invalid literal <span class="token keyword">for</span> int<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">with</span> base <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'3.1415926'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就是类型判断错误引起的报错，正确的写法应该是：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"圆周率是："</span><span class="token punctuation">)</span>                                                                                                                                                                    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token operator">=</span>float<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>                                                                                                                                                                    <span class="token number">3.1415926</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="4-字典（dir）"><a href="#4-字典（dir）" class="headerlink" title="4.字典（dir）"></a>4.字典（dir）</h4><p>字典是python中常常见到的数据类型，表现形式为{“a”:”b”,”c”:”d”}，字典内可以包含一个键值对或者多个其中a和c是字典的键，b和d是键对应的值，我们可以通过键直接获得键对应的值例如：</p><pre class="line-numbers language-python"><code class="language-python">dirctory <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">:</span><span class="token string">"23岁"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">:</span><span class="token string">"28岁"</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">:</span><span class="token string">"5岁"</span><span class="token punctuation">}</span>                                                                                                                                                                                                      age <span class="token operator">=</span>dirctory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>age2 <span class="token operator">=</span>dirctory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>age2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">E<span class="token punctuation">:</span>\python项目练习\venv\Scripts\python<span class="token punctuation">.</span>exe E<span class="token punctuation">:</span><span class="token operator">/</span>python项目练习<span class="token operator">/</span>text<span class="token punctuation">.</span>py                                                                                                                                                   <span class="token number">23</span>岁 <span class="token number">5</span>岁进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因此通过字典来获取数据只需要找到字典的键即可</p><hr><h4 id="5-列表（set）"><a href="#5-列表（set）" class="headerlink" title="5.列表（set）"></a>5.列表（set）</h4><p>列表同样也是非常常用的数据类型，列表通过索引来获取对应的数据，它的书写格式就是[“a”,”b”,”c”,”d”]，a,b,c,d可以是任意值，列表内也可以包含字典如[“a”,”b”,”c”,”d”,{“x”:”y”}]很多情况下我们把数据存放在列表内，通过循环索引达到列表数据的获取非常实用，例如：</p><pre class="line-numbers language-python"><code class="language-python">list <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">]</span>                                                                                                                                                                                                                                                                                                                                                                              n<span class="token operator">=</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    date <span class="token operator">=</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">E<span class="token punctuation">:</span>\python项目练习\venv\Scripts\python<span class="token punctuation">.</span>exe E<span class="token punctuation">:</span><span class="token operator">/</span>python项目练习<span class="token operator">/</span>text<span class="token punctuation">.</span>py                                                                                                                                                                                                                                                                                                                                                                                                 <span class="token number">7</span>a<span class="token number">1</span>bfdnameage进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="6-元组（tuple）"><a href="#6-元组（tuple）" class="headerlink" title="6. 元组（tuple）"></a>6. 元组（tuple）</h4><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改，且内部不包含重复值，元组使用小括号 ( )，列表使用方括号 [ ]，元组中只包含一个元素时，需要在元素后面添加逗号 , ，否则括号会被当作运算符使用：</p><pre class="line-numbers language-python"><code class="language-python">tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>                                                                                                                           tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span>tup3 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span>   <span class="token comment" spellcheck="true">#  不需要括号也可以</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>tup1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>tup2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>tup3<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span>                                                                                                                                      <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>元组还可以通过下标索引访问元组的值例如：</p><pre class="line-numbers language-python"><code class="language-python">tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>                                                                                                                            tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"tup1[0]: "</span><span class="token punctuation">,</span> tup1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#带""则把变量转化为字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"tup2[1:5]: "</span><span class="token punctuation">,</span> tup2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">E<span class="token punctuation">:</span>\python项目练习\venv\Scripts\python<span class="token punctuation">.</span>exe E<span class="token punctuation">:</span><span class="token operator">/</span>python项目练习<span class="token operator">/</span>text<span class="token punctuation">.</span>py                                                                                                                            tup1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  Googletup2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</p><pre class="line-numbers language-python"><code class="language-python">tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34.56</span><span class="token punctuation">)</span>                                                                                                                                           tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 以下修改元组元素操作是非法的。</span><span class="token comment" spellcheck="true"># tup1[0] = 100</span><span class="token comment" spellcheck="true"># 创建一个新的元组</span>tup3 <span class="token operator">=</span> tup1 <span class="token operator">+</span> tup2<span class="token keyword">print</span> <span class="token punctuation">(</span>tup3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">E<span class="token punctuation">:</span>\python项目练习\venv\Scripts\python<span class="token punctuation">.</span>exe E<span class="token punctuation">:</span><span class="token operator">/</span>python项目练习<span class="token operator">/</span>text<span class="token punctuation">.</span>py                                                                                                                         <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34.56</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">)</span>进程已结束，退出代码为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> str </tag>
            
            <tag> int </tag>
            
            <tag> float </tag>
            
            <tag> dir </tag>
            
            <tag> set </tag>
            
            <tag> tuple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/07/hexo%E7%B1%BB%E5%9E%8B%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/"/>
      <url>/2021/07/07/hexo%E7%B1%BB%E5%9E%8B%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<hr><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> theam </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
